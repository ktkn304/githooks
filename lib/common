#!/usr/bin/env bash

_xargs_no_run_if_empty=$(: | xargs echo '--no-run-if-empty')
function xargs_alt() {
    xargs $_xargs_no_run_if_empty "$@"
}

function abs_path() {
    local path="$1"

    if [ -f "$path" ]; then
        local name=$(basename "$path")
        local dirpath=$(dirname "$path")
        (cd "$dirpath" && { echo "$(pwd)/$name" ; })
    elif [ -d "$path" ]; then
        (cd "$path" && pwd)
    else
        echo "$path: No such file or directory" >&2
        return 1
    fi
}

function load_env() {
    : ${1:?"basedir"}
    local basedir="$1"

    export GHOOKS_BASEDIR=$(abs_path "$basedir")
    export GHOOKS_COMMON_SH="$GHOOKS_BASEDIR/lib/common"
    export GHOOKS_CONFIG_KEY_PREFIX="ghooks"
}

function _asserts_env_loaded() {
    : ${GHOOKS_BASEDIR:?"please call load_env()"}
}

function _appname_to_config_key() {
    local appname="$1"
    echo "$appname" | tr '-' '_'
}

function install_hook() {
    _asserts_env_loaded

    local hook="$1"
    local hook_file="$GHOOKS_BASEDIR/hooks/$hook"
    if test -f "$hook_file"; then
        echo "skip: already installed \"$hook_file\""
    else
        echo "install: \"$hook_file\""
        cat > "$hook_file" <<EOF
#!/usr/bin/env bash
hook_base_file="\$(dirname \$(dirname \$0))/lib/hook-base"
. "\$hook_base_file"
EOF
        chmod +x "$hook_file"
    fi
}

function uninstall_hook() {
    _asserts_env_loaded

    local hook="$1"
    local hook_file="$GHOOKS_BASEDIR/hooks/$hook"
    if test -f "$hook_file"; then
        echo "uninstall: \"$hook_file\""
        rm "$hook_file"
    else
        echo "skip: not installed \"$hook_file\""
    fi
}

function list_hooks() {
    _asserts_env_loaded

    local hooks_dir="$GHOOKS_BASEDIR/hooks"
    ls "$hooks_dir" | grep -vxF '.gitkeep'
}

function clear_hooks() {
    _asserts_env_loaded

    echo "begin: hooks clear"

    local hooks_dir="$GHOOKS_BASEDIR/hooks"
    find "$hooks_dir" -type f \! -name '.gitkeep' -delete -print | sed -e 's/^/uninstall: /'

    echo "done: hooks clear"
}

function _apply_app_config() {
    local app_name="$1"

    while read line || test -n "$line"
    do
        name=$(echo "$line" | cut -d ':' -f 1)
        value=$(echo "$line" | cut -d ':' -f 2)

        if [ -z "$name" ]; then
            echo "invalid config: \"$line\"" >&2
            return 1
        fi

        if [ -z "$value" ]; then
            continue
        fi

        case "$name" in
        "hooks")
            echo "$value" | tr ',' '\n' | while read line || test -n "$line"
            do
                install_hook "$line"
            done
            ;;
        "priority")
            local key=$(_appname_to_config_key "$app_name")
            git config --global "$GHOOKS_CONFIG_KEY_PREFIX.apps.$key.priority" "$value"
            ;;
        esac
    done
}

function install_app() {
    _asserts_env_loaded

    local src_path=$(echo "$1" | sed -e 's/\/$//')
    local app_name=$(basename "$src_path")
    local apps_dir="$GHOOKS_BASEDIR/apps"

    echo "begin: app install \"$app_name\""

    if [ -e "$apps_dir/$app_name" ]; then
        echo "cancel: already installed \"$app_name\""
        return 1
    fi

    echo "copy: \"$src_path\" -> \"$apps_dir\""
    cp -r "$src_path" "$apps_dir" || return $?

    echo "run: $apps_dir/$app_name/install"
    "$apps_dir/$app_name/install" | _apply_app_config "$app_name"

    echo "done: app install \"$app_name\""
}

function install_from_collection() {
    _asserts_env_loaded

    local app_name="$1"
    local app_path="$GHOOKS_BASEDIR/collection/$app_name"

    if [ \! -d "$app_path" ]; then
        echo "cancel: $app_name not found in collection." >&2
        return 1
    fi

    install_app "$app_path"
}

function refresh_app() {
    _asserts_env_loaded

    local app_name="$1"
    local app_dir="$GHOOKS_BASEDIR/apps/$app_name"

    echo "begin: refresh \"$app_name\""
    if [ \! -e "$app_dir" ]; then
        echo "cancel: not installed \"$app_name\""
        return 1
    fi

    echo "run: $app_dir/install"
    "$app_dir/install" refresh | _apply_app_config "$app_name"

    echo "done: refresh \"$app_name\""
}

function uninstall_app() {
    _asserts_env_loaded

    local app_name="$1"
    local app_dir="$GHOOKS_BASEDIR/apps/$app_name"

    echo "begin: uninstall \"$app_name\""

    if [ \! -e "$app_dir" ]; then
        echo "cancel: not installed \"$app_name\""
        return 1
    fi

    if [ -f "$app_dir/uninstall" ]; then
        echo "run: $app_dir/uninstall"
        "$app_dir/uninstall"
    fi

    echo "remove: $app_dir"
    rm -r "$app_dir"

    echo "done: uninstall \"$app_name\""
}

function _filter_disabled_apps() {
    while read line || test -n "$line"
    do
        local key=$(_appname_to_config_key "$line")
        local disabled=$(load_config "apps.$key.disabled")
        if [ "$disabled" != 'true' ]; then
            echo "$line"
        fi
    done
}

function _sort_apps() {
    while read line || test -n "$line"
    do
        local key=$(_appname_to_config_key "$line")
        local priority=$(load_config "apps.$key.priority" || echo "0")
        echo "${priority}_$line"
    done | sort -n | sed -e 's/^-*[0-9]*_//'
}

function list_apps() {
    _asserts_env_loaded

    local sort_cmd=_sort_apps
    local filter_cmd=_filter_disabled_apps
    local arg
    for arg in "$@"; do
        case "${arg:-}" in
        "--no-sort")
            sort_cmd=cat
            ;;
        "-a")
            filter_cmd=cat
            ;;
        "--all")
            filter_cmd=cat
            ;;
        *)
            echo "unrecognized parameter: $arg" >&2
            return 1
        esac
        shift
    done

    local apps_dir="$GHOOKS_BASEDIR/apps"
    ls "$apps_dir" | grep -vxF '.gitkeep' | sed -e 's/\/$//' | $filter_cmd | $sort_cmd
}

function refresh_apps() {
    _asserts_env_loaded

    local apps_dir="$GHOOKS_BASEDIR/apps"

    echo "begin: refresh all"

    list_apps --all --no-sort | while read line || test -n "$line"
    do
        refresh_app "$line"
    done

    echo "done: refresh all"
}

function get_app_hook() {
    _asserts_env_loaded

    local app_name="$1"
    local hook="$2"
    local apps_dir="$GHOOKS_BASEDIR/apps/$app_name"

    if [ -f "$apps_dir/hooks/all_hooks" ]; then
        echo "$apps_dir/hooks/all_hooks"
    fi
    if [ -f "$apps_dir/hooks/$hook" ]; then
        echo "$apps_dir/hooks/$hook"
    fi
}

function prune_hooks() {
    clear_hooks
    refresh_app_all
}

function install_git_config() {
    _asserts_env_loaded

    local scope="${1:---global}"
    local hooks_dir=$(abs_path "$GHOOKS_BASEDIR/hooks")
    echo "change git config(${scope:2}): core.hooksPath \"$hooks_dir\""
    git config "$scope" core.hooksPath "$hooks_dir"
}

function uninstall_git_config() {
    _asserts_env_loaded

    local scope="${1:---global}"
    echo "unset git config(${scope:2}): core.hooksPath"
    git config "$scope" --unset core.hooksPath
}

function load_config() {
    local all=
    local without_env=
    local list=
    local name=

    while test -n "${1:-}"; do
        case "$1" in
        "--get-all")
            all='true'
            ;;
        "--without-env")
            without_env='true'
            ;;
        "--list")
            list='true'
            ;;
        *)
            name="$1"
            ;;
        esac
        shift
    done

    if [ -n "$list" ]; then
        {
            git config --get-regex "$GHOOKS_CONFIG_KEY_PREFIX.*" || :
            printenv | grep -e 'GHOOKS_.*'
        } | grep -ve '^$'
    else
        local config_key="$GHOOKS_CONFIG_KEY_PREFIX.$name"
        local env_name=$(echo "$config_key" | tr '[:lower:].' '[:upper:]_')
        if [ -n "$all" ]; then
            {
                git config --get-all "$config_key" || :
                if [ -z "$without_env" ]; then
                    printenv "$env_name" | tr ':' '\n'
                fi
            } | sort -u | grep -ve '^$'
        else
            local value=$(printenv "$env_name")
            if [ -n "$value" -a -z "$without_env" ]; then
                echo "$value"
            else
                git config --get "$config_key"
            fi
        fi
    fi
}
